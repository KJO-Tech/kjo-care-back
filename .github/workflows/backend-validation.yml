name: Spring Microservices CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file with repository secrets
        run: |
          cat > .env << EOL
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_SERVER_URL=${{ secrets.KEYCLOAK_SERVER_URL }}
          KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }}
          KEYCLOAK_MASTER_REALM=${{ secrets.KEYCLOAK_MASTER_REALM }}
          KEYCLOAK_ADMIN_CLIENT=${{ secrets.KEYCLOAK_ADMIN_CLIENT }}
          KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_HOSTNAME=${{ secrets.KEYCLOAK_HOSTNAME }}
          KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
          EOL

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          # Dar tiempo a los servicios para iniciar
          echo "Esperando 60 segundos para que los servicios inicien..."
          sleep 60
          
          # Verificar estado de los servicios
          echo "Verificando estado de los servicios..."
          docker ps
          
          # Verificar cada servicio individualmente
          services=("config-server" "eureka-server" "msvc-auth" "msvc-users" "msvc-mood-tracking" "msvc-emergency" "msvc-blog" "gateway" "keycloak" "postgres")
          
          for service in "${services[@]}"; do
            echo "Verificando servicio: $service"
            if ! docker ps | grep -q "$service"; then
              echo "Error: El servicio $service no está ejecutándose"
              docker logs $service
              exit 1
            fi
          done
          
          # Verificar servicios que tienen healthcheck
          health_services=("config-server" "eureka-server" "keycloak" "postgres")
          
          for service in "${health_services[@]}"; do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' $service 2>/dev/null)
            echo "$service health status: $health_status"
          
            if [ "$health_status" != "healthy" ]; then
              echo "Error: El servicio $service no está saludable"
              docker logs $service
              exit 1
            fi
          done

      - name: Test Eureka Server
        run: |
          # Verificar que Eureka esté funcionando
          EUREKA_URL="http://localhost:8761/actuator/health"
          RESPONSE=$(curl -s $EUREKA_URL)
          echo "Eureka health response: $RESPONSE"
          
          if ! echo "$RESPONSE" | grep -q "UP"; then
            echo "Error: Eureka no está respondiendo correctamente"
            docker logs eureka-server
            exit 1
          fi

      - name: Test Gateway Routes
        run: |
          # Verificar que el gateway esté enrutando correctamente
          BASE_URL="http://localhost:8080/api/mind"
          
          services=("auth" "users" "mood-tracking" "emergency" "blog")
          
          for service in "${services[@]}"; do
            echo "Verificando ruta del gateway a $service"
            URL="$BASE_URL/$service/actuator/health"
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL)
          
            # Aceptar cualquier código 2xx, 3xx o 4xx (podría ser 401 si necesita autenticación)
            if [ "$STATUS_CODE" -ge 200 ] && [ "$STATUS_CODE" -lt 500 ]; then
              echo "Gateway route to $service is working (status code: $STATUS_CODE)"
            else
              echo "Gateway route to $service failed with status code: $STATUS_CODE"
              docker logs gateway
              exit 1
            fi
          done

      - name: Cleanup
        if: always()
        run: docker-compose down -v